import tkinter as tk
from tkinter import messagebox

contacts = {}


def add_contact():
    name = entry_name.get()
    phone = entry_phone.get()
    email = entry_email.get()
    address = entry_address.get()

    if name and phone:
        contacts[name] = {'Phone': phone, 'Email': email, 'Address': address}
        update_contact_list()
        clear_entries()
    else:
        messagebox.showwarning("Warning", "Name and Phone are required!")


def update_contact_list():
    listbox_contacts.delete(0, tk.END)
    for name, info in contacts.items():
        listbox_contacts.insert(tk.END, f"{name} - {info['Phone']}")


def search_contact():
    query = entry_search.get()
    listbox_contacts.delete(0, tk.END)
    for name, info in contacts.items():
        if query.lower() in name.lower() or query in info['Phone']:
            listbox_contacts.insert(tk.END, f"{name} - {info['Phone']}")


def delete_contact():
    selected = listbox_contacts.curselection()
    if selected:
        name = listbox_contacts.get(selected[0]).split(' - ')[0]
        del contacts[name]
        update_contact_list()
    else:
        messagebox.showwarning("Warning", "Please select a contact to delete!")


def select_contact(event):
    selected = listbox_contacts.curselection()
    if selected:
        name = listbox_contacts.get(selected[0]).split(' - ')[0]
        contact = contacts.get(name)
        if contact:
            entry_name.delete(0, tk.END)
            entry_name.insert(0, name)
            entry_phone.delete(0, tk.END)
            entry_phone.insert(0, contact['Phone'])
            entry_email.delete(0, tk.END)
            entry_email.insert(0, contact['Email'])
            entry_address.delete(0, tk.END)
            entry_address.insert(0, contact['Address'])


def update_contact():
    name = entry_name.get()
    if name in contacts:
        contacts[name] = {
            'Phone': entry_phone.get(),
            'Email': entry_email.get(),
            'Address': entry_address.get()
        }
        update_contact_list()
        clear_entries()
    else:
        messagebox.showwarning("Warning", "Contact not found!")


def clear_entries():
    entry_name.delete(0, tk.END)
    entry_phone.delete(0, tk.END)
    entry_email.delete(0, tk.END)
    entry_address.delete(0, tk.END)


def create_contact_book():
    global entry_name, entry_phone, entry_email, entry_address, entry_search, listbox_contacts

    app = tk.Tk()
    app.title("Contact Book")
    app.geometry("400x500")

    tk.Label(app, text="Name:").pack()
    entry_name = tk.Entry(app)
    entry_name.pack()

    tk.Label(app, text="Phone:").pack()
    entry_phone = tk.Entry(app)
    entry_phone.pack()

    tk.Label(app, text="Email:").pack()
    entry_email = tk.Entry(app)
    entry_email.pack()

    tk.Label(app, text="Address:").pack()
    entry_address = tk.Entry(app)
    entry_address.pack()

    tk.Button(app, text="Add Contact", command=add_contact).pack(pady=5)
    tk.Button(app, text="Update Contact", command=update_contact).pack(pady=5)

    tk.Label(app, text="Search:").pack()
    entry_search = tk.Entry(app)
    entry_search.pack()
    tk.Button(app, text="Search", command=search_contact).pack(pady=5)

    listbox_contacts = tk.Listbox(app)
    listbox_contacts.pack(pady=5, fill=tk.BOTH, expand=True)
    listbox_contacts.bind("<<ListboxSelect>>", select_contact)

    tk.Button(app, text="Delete Contact", command=delete_contact).pack(pady=5)
    tk.Button(app, text="Exit", command=app.quit).pack(pady=5)

    app.mainloop()


if __name__ == "__main__":
    create_contact_book()
